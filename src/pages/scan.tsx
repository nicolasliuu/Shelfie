import { type NextPage } from "next";
import Head from "next/head";
import InputInfo from "../components/inputInfo";
import * as tf from '@tensorflow/tfjs';
import * as cocoSsd from '@tensorflow-models/coco-ssd';

import { api } from "~/utils/api";
import axios from 'axios';

const apiKey = process.env.NEXT_PUBLIC_OPENAI_API_KEY;

const Scanner: NextPage = () => {
  const hello = api.example.hello.useQuery({ text: "from tRPC" });

  return (
    <>
      <Head>
        <title>Shelfie</title>
        <meta name="description" content="Generated by create-t3-app"/>
        <link rel="icon" href="/red rider marshie.png"/>
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <div className="container flex flex-col items-center justify-center px-4 py-3 ">
          <h1 className="text-5xl font-extrabold text-white sm:text-[5rem] text-center mb-5">
            I&apos;m <span className="text-[hsl(280,100%,70%)]">Shelfie</span>, your personal <br></br> smart fridge assistant.
          </h1>
          <InputInfo></InputInfo>
        </div>
      </main>

    </>
  );
};

export default Scanner;

// export async function fetchResponse() {
//   try {
//     const response = await axios.post(
//       "https://api.openai.com/v1/engines/davinci/jobs",
//       {
//         prompt: "Given the following description about the user: " + searchprompt + ", provide a list of coffee chat or conversation questions that the user can ask the person. These should be in list format, and between every question, include a <br/>.",
//         max_tokens: 100,
//       },
//       {
//         headers: {
//           'Content-Type': 'application/json',
//           'Authorization': `Bearer ${apiKey}`
//         }
//       }
//     );
//     return response.data.choices[0].text;
//   } catch (error) {
//     console.error(error);
//   }
// }

// const AuthShowcase: React.FC = () => {
//   const { data: sessionData } = useSession();

//   const { data: secretMessage } = api.example.getSecretMessage.useQuery(
//     undefined, // no input
//     { enabled: sessionData?.user !== undefined },
//   );

//   return (
//     <div className="flex flex-col items-center justify-center gap-4">
//       <p className="text-center text-2xl text-white">
//         {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
//         {secretMessage && <span> - {secretMessage}</span>}
//       </p>
//       <button
//         className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
//         onClick={sessionData ? () => void signOut() : () => void signIn()}
//       >
//         {sessionData ? "Sign out" : "Sign in"}
//       </button>
//     </div>
//   );
// };
